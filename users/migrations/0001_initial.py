# Generated by Django 5.1 on 2025-03-19 04:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CuratorsGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Курируемая группа')),
            ],
            options={
                'verbose_name': 'Карируемая группа',
                'verbose_name_plural': 'Курируемые группы',
            },
        ),
        migrations.CreateModel(
            name='CustomPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название группы доступа')),
                ('description', models.CharField(blank=True, max_length=255, null=True, verbose_name='Русское название')),
            ],
            options={
                'verbose_name': 'Кастомная группа',
                'verbose_name_plural': 'Кастомные группы',
            },
        ),
        migrations.CreateModel(
            name='Links',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название ссылки')),
                ('link', models.CharField(max_length=255, verbose_name='Ссылка на страницу')),
            ],
            options={
                'verbose_name': 'Ссылка',
                'verbose_name_plural': 'Доступные ссылки',
            },
        ),
        migrations.CreateModel(
            name='PossibleActions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Действие')),
                ('visible_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Видимое имя')),
            ],
            options={
                'verbose_name': 'Действие',
                'verbose_name_plural': 'Возможные действия',
            },
        ),
        migrations.CreateModel(
            name='Statuses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, max_length=255, null=True, verbose_name='Статус')),
                ('verbose_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Видимое имя')),
            ],
            options={
                'verbose_name': 'Статус',
                'verbose_name_plural': 'Статусы',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('surname', models.CharField(max_length=255, verbose_name='Отчество')),
                ('job_title', models.CharField(default='Не указанна', max_length=255, verbose_name='Должность')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('curators_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='users.curatorsgroup', verbose_name='Курируемая группа')),
                ('custom_permissions', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='users.custompermissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-last_name'],
            },
            managers=[
                ('custom_objects', django.db.models.manager.Manager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название отдела')),
                ('curators_group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.curatorsgroup', verbose_name='Курируемая группа')),
            ],
            options={
                'verbose_name': 'Название отдела',
                'verbose_name_plural': 'Названия отделов',
            },
        ),
        migrations.CreateModel(
            name='CuratorToDepartment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('curator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Куратор')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.department', verbose_name='Курируемый отдел')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='users.department', verbose_name='Отдел'),
        ),
        migrations.AddField(
            model_name='custompermissions',
            name='links',
            field=models.ManyToManyField(to='users.links', verbose_name='Доступные страницы'),
        ),
        migrations.AddField(
            model_name='custompermissions',
            name='possible_actions',
            field=models.ManyToManyField(to='users.possibleactions', verbose_name='Возможные действия'),
        ),
        migrations.AddField(
            model_name='custompermissions',
            name='statuses',
            field=models.ManyToManyField(blank=True, related_name='changed_statuses', to='users.statuses', verbose_name='Изменяемые статусы'),
        ),
        migrations.AddField(
            model_name='custompermissions',
            name='user_can_view',
            field=models.ManyToManyField(blank=True, related_name='view_statuses', to='users.statuses', verbose_name='Просматриваемые статусы'),
        ),
        migrations.CreateModel(
            name='VocationsSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vocation_start', models.DateField(verbose_name='Начало отпуска')),
                ('vocation_end', models.DateField(verbose_name='Конец отпуска')),
                ('deputy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deputy_user', to=settings.AUTH_USER_MODEL, verbose_name='Заместитель')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.custompermissions', verbose_name='группа заместителя')),
                ('vocation_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь в отпуске')),
            ],
        ),
    ]
